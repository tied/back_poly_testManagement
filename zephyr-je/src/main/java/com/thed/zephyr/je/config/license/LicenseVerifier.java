/*
 * $Id$
 *
 *  Copyright (c) 2003 SourceTap - www.sourcetap.com
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.thed.zephyr.je.config.license;

import java.security.PublicKey;

import com.atlassian.jira.security.JiraAuthenticationContext;
import com.atlassian.jira.util.I18nHelper;
import com.thed.zephyr.util.ApplicationConstants;
import com.thed.zephyr.util.ZephyrLicenseException;

/**
 * Verify a License Key using the public key to decrypt it
 *
 * @author Steve Fowler
 * @author Raju Kadam - Updated original class to satisfy our needs.
 * @version $Revision$
 */
public class LicenseVerifier {

	I18nHelper i18nHelper;
	
	public LicenseVerifier(){
		
	}
	
	public LicenseVerifier(JiraAuthenticationContext authContext){
		i18nHelper = authContext.getI18nHelper();
	}

	/**
	 * decrypt the encoded license key and return the corresponding License Object
	 * @param licenseEncoded am encrypted license key as generated by the Registration Server
	 * @return the License Object corresponding to the supplied licenseKey
	 * @throws LicenseException
	 */
	public ZephyrLicense validateLicense(String licenseEncoded)
									throws ZephyrLicenseException 
		{
			String licenseKey = "";
			String signature = "";
			String encodedPublicKey = "";
						
			try 
			{
				EncryptionUtil signer = new EncryptionUtil();
				
				// the encoded license key consists of the base64 encoded license key and the signature
				// generated by the private key, separated by a #
				String tokens[] = licenseEncoded.split("#");
				if ( tokens.length != 2 )
					throw new ZephyrLicenseException(ApplicationConstants.ZEPHYR_INVALID_LICENSE, i18nHelper.getText("zephyr.license.invalid.desc"));
				
				licenseKey = Base64Coder.decode( tokens[0] );
				String signatureAndPublicKeyEncoding = tokens[1];
				
				String anotherTokens[] = signatureAndPublicKeyEncoding.split("@");
				signature = anotherTokens[0];
				
				encodedPublicKey = anotherTokens[1];
				byte[] publicKeyArray = Base64Coder.decode(encodedPublicKey.toCharArray());
				//Pass byte array as it is. Passing public Key as string causes problem on windows platform!
				PublicKey publicKey = signer.readPublicKeyFromBytes(publicKeyArray);

				if ( !signer.verify( licenseKey, signature, publicKey ) )					
					throw new ZephyrLicenseException(ApplicationConstants.ZEPHYR_LICENSE_PUBLICKEY_ERROR, i18nHelper.getText("zephyr.license.signaturepublickey.error.desc"));
						
				ZephyrLicense lic = new ZephyrLicense(licenseKey);
				return lic;
			}
			catch ( Exception e)
			{
				e.printStackTrace();
					throw new ZephyrLicenseException(ApplicationConstants.ZEPHYR_INVALID_LICENSE, i18nHelper.getText("zephyr.license.invalid.desc"));
			}
		}
	
	//For pure testing purposes! 
	//Used from LicenseRunner during Encrypted License Key Generation
	public void validateLicense(String licenseEncoded, boolean testflag)
			throws ZephyrLicenseException{
			String licenseKey = "";
			String signature = "";
			String encodedPublicKey = "";
			
			try 
			{
				EncryptionUtil signer = new EncryptionUtil();
				
				// the encoded license key consists of the base64 encoded license key and the signature
				// generated by the private key, separated by a #
				String tokens[] = licenseEncoded.split("#");
				if ( tokens.length != 2 )
				throw new ZephyrLicenseException(ApplicationConstants.ZEPHYR_INVALID_LICENSE, i18nHelper.getText("zephyr.license.invalid.desc"));
				
				licenseKey = Base64Coder.decode( tokens[0] );
				String signatureAndPublicKeyEncoding = tokens[1];
				
				String anotherTokens[] = signatureAndPublicKeyEncoding.split("@");
				signature = anotherTokens[0];
				
				encodedPublicKey = anotherTokens[1];
				byte[] publicKeyArray = Base64Coder.decode(encodedPublicKey.toCharArray());
				PublicKey publicKey = signer.readPublicKeyFromBytes(publicKeyArray);
				
				if ( !signer.verify( licenseKey, signature, publicKey ) )					
				throw new ZephyrLicenseException(ApplicationConstants.ZEPHYR_LICENSE_PUBLICKEY_ERROR, i18nHelper.getText("zephyr.license.signaturepublickey.error.desc"));
			}
			catch ( Exception e)
			{
				e.printStackTrace();
				throw new ZephyrLicenseException(ApplicationConstants.ZEPHYR_INVALID_LICENSE, i18nHelper.getText("zephyr.license.invalid.desc"));
			}
	}	
}